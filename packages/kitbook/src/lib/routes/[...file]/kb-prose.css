.kb-prose {
  color: var(--kb-prose-body);
  max-width: 65ch;
}
.kb-prose :where([class~="lead"]):not(:where([class~="not-prose"] *)) {
  color: var(--kb-prose-lead);
  font-size: 1.25em;
  line-height: 1.6;
  margin-top: 1.2em;
  margin-bottom: 1.2em;
}
.kb-prose :where(a):not(:where([class~="not-prose"] *)) {
  color: var(--kb-prose-links);
  text-decoration: underline;
  font-weight: 500;
}
.kb-prose :where(strong):not(:where([class~="not-prose"] *)) {
  color: var(--kb-prose-bold);
  font-weight: 600;
}
.kb-prose :where(ol):not(:where([class~="not-prose"] *)) {
  list-style-type: decimal;
  padding-left: 1.625em;
}
.kb-prose :where(ol[type="A"]):not(:where([class~="not-prose"] *)) {
  list-style-type: upper-alpha;
}
.kb-prose :where(ol[type="a"]):not(:where([class~="not-prose"] *)) {
  list-style-type: lower-alpha;
}
.kb-prose :where(ol[type="A" s]):not(:where([class~="not-prose"] *)) {
  list-style-type: upper-alpha;
}
.kb-prose :where(ol[type="a" s]):not(:where([class~="not-prose"] *)) {
  list-style-type: lower-alpha;
}
.kb-prose :where(ol[type="I"]):not(:where([class~="not-prose"] *)) {
  list-style-type: upper-roman;
}
.kb-prose :where(ol[type="i"]):not(:where([class~="not-prose"] *)) {
  list-style-type: lower-roman;
}
.kb-prose :where(ol[type="I" s]):not(:where([class~="not-prose"] *)) {
  list-style-type: upper-roman;
}
.kb-prose :where(ol[type="i" s]):not(:where([class~="not-prose"] *)) {
  list-style-type: lower-roman;
}
.kb-prose :where(ol[type="1"]):not(:where([class~="not-prose"] *)) {
  list-style-type: decimal;
}
.kb-prose :where(ul):not(:where([class~="not-prose"] *)) {
  list-style-type: disc;
  padding-left: 1.625em;
}
.kb-prose :where(ol > li):not(:where([class~="not-prose"] *))::marker {
  font-weight: 400;
  color: var(--kb-prose-counters);
}
.kb-prose :where(ul > li):not(:where([class~="not-prose"] *))::marker {
  color: var(--kb-prose-bullets);
}
.kb-prose :where(hr):not(:where([class~="not-prose"] *)) {
  border-color: var(--kb-prose-hr);
  border-top-width: 1px;
  margin-top: 3em;
  margin-bottom: 3em;
}
.kb-prose :where(blockquote):not(:where([class~="not-prose"] *)) {
  font-weight: 500;
  font-style: italic;
  color: var(--kb-prose-quotes);
  border-left-width: 0.25rem;
  border-left-color: var(--kb-prose-quote-borders);
  quotes: "\201C""\201D""\2018""\2019";
  margin-top: 1.6em;
  margin-bottom: 1.6em;
  padding-left: 1em;
}
.kb-prose :where(blockquote p:first-of-type):not(:where([class~="not-prose"] *))::before {
  content: open-quote;
}
.kb-prose :where(blockquote p:last-of-type):not(:where([class~="not-prose"] *))::after {
  content: close-quote;
}
.kb-prose :where(h1):not(:where([class~="not-prose"] *)) {
  color: var(--kb-prose-headings);
  font-weight: 800;
  font-size: 2.25em;
  margin-top: 0;
  margin-bottom: 0.8888889em;
  line-height: 1.1111111;
}
.kb-prose :where(h1 strong):not(:where([class~="not-prose"] *)) {
  font-weight: 900;
}
.kb-prose :where(h2):not(:where([class~="not-prose"] *)) {
  color: var(--kb-prose-headings);
  font-weight: 700;
  font-size: 1.5em;
  margin-top: 2em;
  margin-bottom: 1em;
  line-height: 1.3333333;
}
.kb-prose :where(h2 strong):not(:where([class~="not-prose"] *)) {
  font-weight: 800;
}
.kb-prose :where(h3):not(:where([class~="not-prose"] *)) {
  color: var(--kb-prose-headings);
  font-weight: 600;
  font-size: 1.25em;
  margin-top: 1.6em;
  margin-bottom: 0.6em;
  line-height: 1.6;
}
.kb-prose :where(h3 strong):not(:where([class~="not-prose"] *)) {
  font-weight: 700;
}
.kb-prose :where(h4):not(:where([class~="not-prose"] *)) {
  color: var(--kb-prose-headings);
  font-weight: 600;
  margin-top: 1.5em;
  margin-bottom: 0.5em;
  line-height: 1.5;
}
.kb-prose :where(h4 strong):not(:where([class~="not-prose"] *)) {
  font-weight: 700;
}
.kb-prose :where(figure > *):not(:where([class~="not-prose"] *)) {
  margin-top: 0;
  margin-bottom: 0;
}
.kb-prose :where(figcaption):not(:where([class~="not-prose"] *)) {
  color: var(--kb-prose-captions);
  font-size: 0.875em;
  line-height: 1.4285714;
  margin-top: 0.8571429em;
}
.kb-prose :where(code):not(:where([class~="not-prose"] *)):not(:where([class~="shiki"] *)) {
  color: var(--kb-prose-code);
  font-size: 0.875em;
  background: #e6e6e6; 
  padding: 2px 4px;
  border-radius: 4px;
}
.kb-prose :where(a code):not(:where([class~="not-prose"] *)) {
  color: var(--kb-prose-links);
}
.kb-prose :where(table):not(:where([class~="not-prose"] *)) {
  width: 100%;
  table-layout: auto;
  text-align: left;
  margin-top: 2em;
  margin-bottom: 2em;
  font-size: 0.875em;
  line-height: 1.7142857;
}
.kb-prose :where(thead):not(:where([class~="not-prose"] *)) {
  border-bottom-width: 1px;
  border-bottom-color: var(--kb-prose-th-borders);
}
.kb-prose :where(thead th):not(:where([class~="not-prose"] *)) {
  color: var(--kb-prose-headings);
  font-weight: 600;
  vertical-align: bottom;
  padding-right: 0.5714286em;
  padding-bottom: 0.5714286em;
  padding-left: 0.5714286em;
}
.kb-prose :where(tbody tr):not(:where([class~="not-prose"] *)) {
  border-bottom-width: 1px;
  border-bottom-color: var(--kb-prose-td-borders);
}
.kb-prose :where(tbody tr:last-child):not(:where([class~="not-prose"] *)) {
  border-bottom-width: 0;
}
.kb-prose :where(tbody td):not(:where([class~="not-prose"] *)) {
  vertical-align: baseline;
  padding-top: 0.5714286em;
  padding-right: 0.5714286em;
  padding-bottom: 0.5714286em;
  padding-left: 0.5714286em;
}
.kb-prose {
  --kb-prose-body: #374151;
  --kb-prose-headings: #111827;
  --kb-prose-lead: #4b5563;
  --kb-prose-links: #111827;
  --kb-prose-bold: #111827;
  --kb-prose-counters: #6b7280;
  --kb-prose-bullets: #d1d5db;
  --kb-prose-hr: #e5e7eb;
  --kb-prose-quotes: #111827;
  --kb-prose-quote-borders: #e5e7eb;
  --kb-prose-captions: #6b7280;
  --kb-prose-code: #111827;
  --kb-prose-th-borders: #d1d5db;
  --kb-prose-td-borders: #e5e7eb;
  font-size: 1rem;
  line-height: 1.75;
}
.kb-prose :where(p):not(:where([class~="not-prose"] *)) {
  margin-top: 1.25em;
  margin-bottom: 1.25em;
}
.kb-prose :where(img):not(:where([class~="not-prose"] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}
.kb-prose :where(video):not(:where([class~="not-prose"] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}
.kb-prose :where(figure):not(:where([class~="not-prose"] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}
.kb-prose :where(h2 code):not(:where([class~="not-prose"] *)) {
  font-size: 0.875em;
}
.kb-prose :where(h3 code):not(:where([class~="not-prose"] *)) {
  font-size: 0.9em;
}
.kb-prose :where(li):not(:where([class~="not-prose"] *)) {
  margin-top: 0.5em;
  margin-bottom: 0.5em;
}
.kb-prose :where(ol > li):not(:where([class~="not-prose"] *)) {
  padding-left: 0.375em;
}
.kb-prose :where(ul > li):not(:where([class~="not-prose"] *)) {
  padding-left: 0.375em;
}
.kb-prose > :where(ul > li p):not(:where([class~="not-prose"] *)) {
  margin-top: 0.75em;
  margin-bottom: 0.75em;
}
.kb-prose > :where(ul > li > *:first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 1.25em;
}
.kb-prose > :where(ul > li > *:last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 1.25em;
}
.kb-prose > :where(ol > li > *:first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 1.25em;
}
.kb-prose > :where(ol > li > *:last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 1.25em;
}
.kb-prose :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"] *)) {
  margin-top: 0.75em;
  margin-bottom: 0.75em;
}
.kb-prose :where(hr + *):not(:where([class~="not-prose"] *)) {
  margin-top: 0;
}
.kb-prose :where(h2 + *):not(:where([class~="not-prose"] *)) {
  margin-top: 0;
}
.kb-prose :where(h3 + *):not(:where([class~="not-prose"] *)) {
  margin-top: 0;
}
.kb-prose :where(h4 + *):not(:where([class~="not-prose"] *)) {
  margin-top: 0;
}
.kb-prose :where(thead th:first-child):not(:where([class~="not-prose"] *)) {
  padding-left: 0;
}
.kb-prose :where(thead th:last-child):not(:where([class~="not-prose"] *)) {
  padding-right: 0;
}
.kb-prose :where(tbody td:first-child):not(:where([class~="not-prose"] *)) {
  padding-left: 0;
}
.kb-prose :where(tbody td:last-child):not(:where([class~="not-prose"] *)) {
  padding-right: 0;
}
.kb-prose > :where(:first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 0;
}
.kb-prose > :where(:last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0;
}